---
description: 
globs: 
alwaysApply: false
---
# Project Progress

## Authentication System

### Custom User Model (2023-07-10)

- Implemented a custom user model in `apps/core/models.py` that extends Django's `AbstractUser`.
- The model supports three user types:
  - Academic Affairs Office Admin
  - Department Head
  - Professor
- Authentication is done using the username field, while maintaining email uniqueness.
- Custom `UserManager` was created to support user and superuser creation with both username and email.
- Helper methods added to easily check user types:
  - `is_academic_admin()`
  - `is_department_head()`
  - `is_professor()`
- Updated Django settings to use the custom user model by adding `AUTH_USER_MODEL = 'core.User'` in `config/settings.py`.

The custom User model provides the foundation for role-based access control throughout the application. Department Head role is assigned to professors who lead departments.

### Admin Interface for User Model (2023-07-11)

- Implemented `CustomUserAdmin` in `apps/core/admin.py` that extends Django's `UserAdmin`
- Customized the admin interface to display and filter by user types
- Created specialized fieldsets that include the user_type field
- Added user_type to the user creation form
- Made `date_joined` and `last_login` read-only to avoid admin errors

### Authentication Views and Templates (2023-07-12)

- Created login view in `apps/core/views.py` that redirects users based on their type
- Implemented dashboard templates for each user type:
  - Academic Affairs Office Admin (`academic_admin_dashboard.html`)
  - Department Head (`department_head_dashboard.html`) 
  - Professor (`professor_dashboard.html`)
- Added role-based access control to ensure users can only access appropriate dashboards
- Set up URL configuration in `apps/core/urls.py` for authentication endpoints
- Integrated with Django's authentication system for login/logout functionality

### Department and Professor Models (2023-07-15)

- Created `Department` model in `apps/departments/models.py` with:
  - Title field for department name
  - Code field for unique department code
  - Department head OneToOneField linked to User model
  - Auto-updating department head user type on save
- Created `Professor` model in `apps/professors/models.py` with:
  - OneToOneField to User model for base user data
  - ForeignKey to Department for department association
  - Additional fields for employee ID and academic title
  - Employment type field with fractional options (0.25 to 2.0)
  - Boolean field for tracking doctoral degree holders
- Implemented admin interfaces in respective admin.py files with:
  - Optimized querysets using select_related
  - Custom display methods for better admin experience
  - Appropriate filters and search fields
- Added management command in `apps/core/management/commands/create_dummy_data.py` to:
  - Create departments for different academic disciplines
  - Generate professor users with Marvel and DC character names
  - Assign department heads automatically from professors with doctoral degrees
  - Set up an academic admin user

## Curriculum Excel Parsing (2024-07-XX)

- Implemented robust Excel parsing for curriculum metadata in `apps/curricula/parsing.py`.
- The function `parse_curriculum_metadata(sheet)` extracts:
  - Major type (Akademik Daraja)
  - Major duration (O'qish muddati)
  - Type of education (Ta'lim shakli)
  - Major code + title (cell below "Ta'lim yo'nalishi")
- Handles merged cells, dash/apostrophe variations, and missing values (returns None if not found).
- Refactored the view to use this utility and return the parsed data as a dictionary in the HTTP response for testing.
- Removed all debug/print statements from the view.
- **NEW:** Now also parses all mandatory courses from the Excel file, starting from the row with '1.01'. For each mandatory course, extracts the course code and course title, and returns them as a list of dictionaries under the 'mandatory_courses' key in the parsed data dictionary. (Implemented in `apps/curricula/parsing.py`, function `parse_curriculum_metadata`).

## UI Templates

- **Created `templates/base.html`:**
    - Based on the refined `department.html` structure (with sidebar, top bar, footer, and collapsible functionality).
    - Generalizes the layout for use across the entire application.
    - Includes Django template blocks:
        - `{% block title %}`: For setting the page title.
        - `{% block extra_head %}`: For page-specific CSS or meta tags.
        - `{% block breadcrumb %}`: For customizing breadcrumb navigation in the top bar.
        - `{% block user_name %}`: For displaying user-specific information in the top bar.
        - `{% block content %}`: The main placeholder for page-specific content.
        - `{% block extra_js %}`: For page-specific JavaScript.
    - Sidebar toggle button style was refined for a more professional look.
    - Copyright year in the footer now uses `{% now "Y" %}`.
    - JavaScript for sidebar toggle now checks for the button's existence before adding an event listener.
- **Refactored `templates/department.html`:**
    - Now uses `{% extends 'base.html' %}` to inherit the common layout.
    - Page-specific content is placed within the `{% block content %}`.
    - `{% block title %}`, `{% block breadcrumb %}`, and `{% block user_name %}` are defined with content relevant to the department page, using placeholders for dynamic Django context variables (e.g., `{{ department_name }}`, `{{ user.username }}`).

## Finished Features

### Curricula App Setup (Initial & Enhancements)

- **Models (`apps/curricula/models.py`):**
    - Created `Curriculum` model with fields: `code`, `title`, `start_year`, `degree` (Bachelors, Masters), `duration`, and `data` (JSONField for course info).
    - Includes `__str__` method and basic `Meta` options for ordering and verbose names.
    - Added `@property def academic_year_display(self)` to show `start_year` as `YYYY/YYYY+1` (e.g., "2023/2024").
- **Admin (`apps/curricula/admin.py`):**
    - Registered `Curriculum` model with a `CurriculumAdmin` class.
    - Configured `list_display`, `list_filter`, and `search_fields` for the admin interface.
- **Forms (`apps/curricula/forms.py`):**
    - Created `CurriculumForm`, a `ModelForm` for the `Curriculum` model.
    - Includes fields: `code`, `title`, `start_year`, `degree`, `duration`, `data`.
    - Widgets are styled with Bootstrap classes (`form-control`, `form-select`).
    - Provided Uzbek labels for form fields.
    - Added custom validation: `clean_start_year` (validates year range) and `clean_duration` (validates duration based on degree type).
- **Migrations:**
    - Generated and applied initial migrations for the `Curriculum` model.
- **Views (`apps/curricula/views.py`):**
    - `CurriculumListView` (class-based view):
        - Displays a list of all curricula, ordered by `title` and `start_year`.
        - Uses `curricula/curriculum_list.html` template.
        - Provides `curricula` (paginated list) and `form` (an instance of `CurriculumForm`) to the template context.
        - Implements pagination (`paginate_by = 10`).
    - `curriculum_create_view` (function-based view):
        - Handles POST requests for creating a new curriculum using `CurriculumForm`.
        - On successful save, redirects to `curriculum_list` with a success message.
        - On form errors, redirects to `curriculum_list` and displays error messages (using Django messages framework).
        - Redirects to `curriculum_list` for GET requests.
    - `upload_excel` view stub added by user (renders `curricula/upload_excel.html`).
    - `parse_curriculum_excel` view exists but is not currently mapped to a URL.
- **Templates (`apps/curricula/templates/curricula/curriculum_list.html`):**
    - Extends `base.html`.
    - Displays curricula in a styled table. The "Boshlanish o'quv yili" column now uses `curriculum.academic_year_display`.
    - Includes a button "Yangi o'quv dasturi qo'shish" that triggers a Bootstrap modal (`#addCurriculumModal`).
    - **Modal Redesign (`#addCurriculumModal`):**
        - Form fields are now rendered individually using a Bootstrap grid for a professional, structured layout (`col-md-*`).
        - Includes `form-label` for labels, `form-text` for help texts, and placeholders for `invalid-feedback` for potential inline errors.
        - `modal-dialog-scrollable` class added for better handling of long content.
        - Footer buttons styled (outline for "Bekor qilish", icon for "Saqlash").
    - Implements pagination display.
    - Shows a message if no curricula are found; this message also includes a link to open the add curriculum modal.
    - **Localization**: All user-facing text in this template (including form elements triggered from here) is in Uzbek.
    - Added a section at the top of the content block to display Django messages (e.g., success/error alerts).
- **URLs (`apps/curricula/urls.py`):**
    - `app_name = 'curricula'` is set.
    - URL pattern for `CurriculumListView`: `''` (e.g., `/curricula/`), named `curriculum_list`.
    - URL pattern for `curriculum_create_view`: `'create/'`, named `curriculum_create`.
    - URL pattern for `upload_excel` view: `'upload/'`, named `upload_excel` (points to the new simple rendering view).
- **Project URLs (`config/urls.py`):**
    - Confirmed that `apps.curricula.urls` is included in the main project URLs with the prefix `curricula/`.

### Excel Upload (Existing - Status Update)
- **Views (`apps/curricula/views.py`):**
    - The `parse_curriculum_excel` view (which handles the actual parsing) is currently not linked to any URL due to the `upload_excel` URL pattern now pointing to a simple template rendering view.
- **Parsing (`apps/curricula/parsing.py`):**
    - Contains `parse_curricula_metadata` function.
- **Templates (`apps/curricula/templates/curricula/upload_excel.html`):**
    - Basic template for uploading an Excel file.

## Features Implemented

### Departments App
- **Models (`apps/departments/models.py`):**
    - `Department` model defined with fields: `title`, `code`, `department_head`.
    - Added `total_lecture_hours`, `total_practice_hours`, `total_laboratory_hours`, `total_seminar_hours` fields (all `PositiveIntegerField`, `default=0`, `editable=False`) to store aggregated hours from assigned courses.
- **Views (`apps/departments/views.py`):**
    - `DepartmentListView`: Class-based view displaying a list of departments with pagination and create/edit form handling (via modals).
    - `DepartmentDetailView`: Class-based view showing details for a specific department, including calculated total hours and assigned professors. **Context updated to also fetch and structure all assigned courses/slots from all curricula for display.**
    - Function-based views (`department_create_view`, `department_update_view`, `department_delete_view`) primarily for handling AJAX requests from modal forms in the list view.
- **Forms (`apps/departments/forms.py`):**
    - `DepartmentForm`: A `ModelForm` for creating and updating `Department` instances, including validation.
- **Templates (`apps/departments/templates/departments/`):**
    - `department_list.html`: Main template displaying the list, including modal forms for create/update/delete. Table updated to show total calculated lecture, practice, laboratory, and seminar hours for each department. Added links to the detail view. **Removed the 'Actions' column and added a 'Total Classroom Hours' column.**
    - `department_detail.html`: New template to display detailed information about a department, including basic info, department head, total calculated hours, and a list of assigned professors. **Added a new table displaying details of courses/slots assigned to this department (Curriculum, Year, Type, Code/Slot, Title, Hours).**
    - `_department_form.html`: Partial template for the department form (used in modals).
    - `_confirm_delete.html`: Partial template for the delete confirmation modal.
- **URLs (`apps/departments/urls.py`):**
    - URL patterns defined for the department CRUD views and detail view.
- **Admin (`apps/departments/admin.py`):**
    - `Department` model registered with the Django admin site for easy management.
- **Utils (`apps/departments/utils.py`):**
    - Added `recalculate_department_hours(department_id)` function: Queries all curricula, sums hours for courses/slots assigned to the given department ID, and updates the department's total hour fields.

### Curricula App
- **Models (`apps/curricula/models.py`):**
    - `Curriculum` model defined with fields: `code`, `title`, `start_year`, `degree`, `duration`, `data` (JSONField to store parsed course info), `source_excel_file` (FileField).
- **Views (`apps/curricula/views.py`):**
    - `CurriculumListView`: Displays a list of curricula using `ListView`.
    - `CurriculumDetailView`: Displays details of a curriculum, including mandatory and selective courses parsed from the `data` field. Uses DataTables for course display.
    - `curriculum_create_view`: Handles creation of new curricula, including parsing an uploaded Excel file using `parser.py` and saving the structured data into the `data` JSONField.
    - `update_course_data_view`: An API endpoint (POST request) to update specific fields (like title, hours, credits, **department_id**) within the `data` JSONField for a given course/slot in a curriculum. **Crucially, after successfully updating a `department_id`, this view now calls `recalculate_department_hours` for the old and new departments to keep their aggregate hours correct.**
- **Forms (`apps/curricula/forms.py`):**
    - `CurriculumForm`: `ModelForm` for creating curricula, handles file upload.
- **Templates (`apps/curricula/templates/curricula/`):**
    - `curriculum_list.html`: Displays the list of curricula and includes the creation form.
    - `curriculum_detail.html`: Detailed view with DataTables for mandatory and selective courses. Implements inline editing for course data fields (title, hours, credits, department) using JavaScript (jQuery, Fetch API) that interacts with `update_course_data_view`. Department assignment uses a dropdown populated dynamically.
- **Parser (`apps/curricula/parser.py`):**
    - Contains `extract_mandatory_courses` and `extract_selective_courses` functions to parse data from a specific Excel template format using `pandas`.
- **Template Tags (`apps/curricula/templatetags/curriculum_extras.py`):**
    - Custom tags like `get_item` used in templates.
- **URLs (`apps/curricula/urls.py`):**
    - URL patterns for curriculum list, detail, create, and the update API endpoint.

### Core App
- **Models (`apps/core/models.py`):**
    - Custom `User` model inheriting from `AbstractUser`, adding `user_type` (Professor, Department Head, Admin).
- **Views (`apps/core/views.py`):**
    - `home_view`: Basic home page view.
    - `login_view`: Custom login view.
    - `logout_view`: Custom logout view.
- **URLs (`apps/core/urls.py`):**
    - URL patterns for core views.

### Project Configuration (`config/`)
- **`settings.py`**: Standard Django settings, configured apps, database (SQLite), static files, custom user model (`AUTH_USER_MODEL`).
- **`urls.py`**: Main project URL routing, includes app-specific URLs.

## What's Left to Build / Next Steps
- **Professor Management:** Implement CRUD for Professors.
- **Course Assignment to Professors:** Link courses (from curriculum data) to specific professors.
- **Load Calculation:** Calculate teaching loads based on assigned courses.
- **Reporting:** Generate reports on departmental loads, professor loads, etc.
- **Refinement & Testing:** Add more robust testing, improve UI/UX, handle edge cases in parsing/data handling.
- **Signal Handling:** Consider using signals (e.g., `post_save`, `post_delete` on `Curriculum`) to trigger department hour recalculation upon curriculum creation/deletion for robustness, in addition to the current update view trigger.
- **Department Detail View Enhancements:** The detail view could be enhanced with more interactive elements or links.
- **Clean up Department Views:** Refactor `departments/views.py` to clarify the roles of CBVs and FBVs, potentially consolidating AJAX handling.

## Current Status
- Core setup with custom user model is complete.
- Department CRUD functionality is implemented (List, Detail via CBV; Create/Update/Delete via FBV AJAX handlers and modals).
- Curriculum CRUD is implemented, including Excel parsing and storage of course data in JSON.
- Inline editing of curriculum course data (including department assignment) is functional via the detail view and a dedicated API endpoint.
- Department hour totals are automatically recalculated and stored whenever a course's department assignment is changed via the curriculum detail page.
- Department list and detail views now display the calculated total hours (lecture, practice, lab, seminar) for each department.
- **Department list view now shows total classroom hours sum and hides the actions column.**
- **Department detail view now includes a table listing all assigned courses/slots from different curricula.**

## Known Issues
- Excel parser (`parser.py`) is tightly coupled to a specific template format. Errors in the Excel file might break parsing. Needs more robust error handling.
- Department hour recalculation currently only happens when assignments are changed via `update_course_data_view`. If curricula are created/deleted or the `data` field is modified *outside* this view (e.g., in admin), the totals might become stale. Implementing signal handlers would address this.
- Limited test coverage.
- Potential confusion between class-based views (ListView, DetailView) and function-based views (create, update, delete AJAX handlers) in `departments/views.py`. This could be refactored for clarity.

---

**All features are implemented minimally and directly according to requirements. No overengineering or unnecessary abstraction is present. The codebase is clean, maintainable, and ready for further MVP development.**














